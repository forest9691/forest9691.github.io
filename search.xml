<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React反思</title>
      <link href="/2023/12/07/React%E5%8F%8D%E6%80%9D/"/>
      <url>/2023/12/07/React%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="抽象能力＝编程能力"><a href="#抽象能力＝编程能力" class="headerlink" title="抽象能力＝编程能力"></a>抽象能力＝编程能力</h1><p>编程能力就是抽象能力，其中最重要的一个项就是命名能力。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> style = &#123; <br>        <span class="hljs-attr">width</span>: <span class="hljs-number">300</span>, <br>        <span class="hljs-attr">margin</span>: <span class="hljs-number">50</span>, <br>    &#125;;<br>    <span class="hljs-comment">// 这里的命令好否的标准就是抽象能力</span><br>    <span class="hljs-keyword">const</span> searchStyle = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> search = (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;searchStyle&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>    <span class="hljs-keyword">const</span> classString = <span class="hljs-title function_">classNames</span>(<br>        prefixCls,<br>        &#123;<br>          [<span class="hljs-string">`<span class="hljs-subst">$&#123;prefixCls&#125;</span>-loading`</span>]: loading,<br>        &#125;,<br>        className,<br>    );<br>    <span class="hljs-keyword">return</span> (<br>        &lt;!--style的属性值提取出来命名能力就是抽象能力--&gt;<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;classString&#125;</span>&gt;</span></span><br><span class="language-xml">            &#123;search&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="React-哲学"><a href="#React-哲学" class="headerlink" title="React 哲学"></a>React 哲学</h2><p>首先，会把它分解成一个个 <strong>组件</strong></p><blockquote><p>函数组件、类组件、ＤＯＭ组件</p></blockquote><p>然后，你需要把这些组件连接在一起</p><blockquote><p>嵌套组件、渲染属性、高阶组件</p></blockquote><p>最后，使数据流经它们</p><blockquote><p>state、props、context</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React学习教程</title>
      <link href="/2023/12/04/React%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/"/>
      <url>/2023/12/04/React%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Props传递"><a href="#Props传递" class="headerlink" title="Props传递"></a>Props传递</h1><h2 id="使用驼峰式命名法给-所有-大部分属性命名"><a href="#使用驼峰式命名法给-所有-大部分属性命名" class="headerlink" title="使用驼峰式命名法给 所有 大部分属性命名"></a>使用驼峰式命名法给 所有 大部分属性命名</h2><p>JSX 最终会被转化为 JavaScript，而 JSX 中的属性也会变成 JavaScript 对象中的键值对。在你自己的组件中，经常会遇到需要用变量的方式读取这些属性的时候。但 JavaScript 对变量的命名有限制。例如，变量名称不能包含 <code>-</code> 符号或者像 <code>class</code> 这样的保留字。</p><p>这就是为什么在 React 中，大部分 HTML 和 SVG 属性都用驼峰式命名法表示。例如，需要用 <code>strokeWidth</code> 代替 <code>stroke-width</code>。由于 <code>class</code> 是一个保留字，所以在 React 中需要用 <code>className</code> 来代替。这也是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/className">DOM 属性中的命名</a></p><h2 id="在-JSX-中通过大括号使用-JavaScript"><a href="#在-JSX-中通过大括号使用-JavaScript" class="headerlink" title="在 JSX 中通过大括号使用 JavaScript"></a>在 JSX 中通过大括号使用 JavaScript</h2><p>JSX 允许你在 JavaScript 中编写类似 HTML 的标签，从而使渲染的逻辑和内容可以写在一起。有时候，你可能想要在标签中添加一些 JavaScript 逻辑或者引用动态的属性。这种情况下，你可以在 JSX 的大括号内来编写 JavaScript。</p><h2 id="使用引号传递字符串"><a href="#使用引号传递字符串" class="headerlink" title="使用引号传递字符串"></a>使用引号传递字符串</h2><p>当你想把一个字符串属性传递给 JSX 时，把它放到单引号或双引号中.</p><p>如果你想要动态地指定 <code>src</code> 或 <code>alt</code> 的值呢？你可以 <strong>用 <code>&#123;</code> 和 <code>&#125;</code> 替代 <code>&quot;</code> 和 <code>&quot;</code> 以使用 JavaScript 变量</strong> </p><h3 id="可以在哪使用大括号"><a href="#可以在哪使用大括号" class="headerlink" title="可以在哪使用大括号"></a>可以在哪使用大括号</h3><p>在 JSX 中，只能在以下两种场景中使用大括号：</p><ol><li>用作 JSX 标签内的<strong>文本</strong>：<code>&lt;h1&gt;&#123;name&#125;&#39;s To Do List&lt;/h1&gt;</code> 是有效的，但是 <code>&lt;&#123;tag&#125;&gt;Gregorio Y. Zara&#39;s To Do List&lt;/&#123;tag&#125;&gt;</code> 无效。</li><li>用作紧跟在 <code>=</code> 符号后的 <strong>属性</strong>：<code>src=&#123;avatar&#125;</code> 会读取 <code>avatar</code> 变量，但是 <code>src=&quot;&#123;avatar&#125;&quot;</code> 只会传一个字符串 <code>&#123;avatar&#125;</code>。</li></ol><h2 id="将-Props-传递给组件"><a href="#将-Props-传递给组件" class="headerlink" title="将 Props 传递给组件"></a>将 Props 传递给组件</h2><p>React 组件使用 <em>props</em> 来互相通信。每个父组件都可以提供 props 给它的子组件，从而将一些信息传递给它。Props 可能会让你想起 HTML 属性，但你可以通过它们传递任何 JavaScript 值，包括对象、数组和函数。</p><blockquote><p>属性值可以是任何表达式的值</p></blockquote><h2 id="给-prop-指定一个默认值"><a href="#给-prop-指定一个默认值" class="headerlink" title="给 prop 指定一个默认值"></a>给 prop 指定一个默认值</h2><p>如果你想在没有指定值的情况下给 prop 一个默认值，你可以通过在参数后面写 <code>=</code> 和默认值来进行解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Avatar</span>(<span class="hljs-params">&#123; person, size = <span class="hljs-number">100</span> &#125;</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>请克制地使用展开语法。</strong> 如果你在所有其他组件中都使用它，那就有问题了。 通常，它表示你应该拆分组件，并将子组件作为 JSX 传递。 接下来会详细介绍！</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>要传递 props，请将它们添加到 JSX，就像使用 HTML 属性一样。</li><li>要读取 props，请使用 <code>function Avatar(&#123; person, size &#125;)</code> 解构语法。</li><li>你可以指定一个默认值，如 <code>size = 100</code>，用于缺少值或值为 <code>undefined</code> 的 props 。</li><li>你可以使用 <code>&lt;Avatar &#123;...props&#125; /&gt;</code> JSX 展开语法转发所有 props，但不要过度使用它！</li><li>像 <code>&lt;Card&gt;&lt;Avatar /&gt;&lt;/Card&gt;</code> 这样的嵌套 JSX，将被视为 <code>Card</code> 组件的 <code>children</code> prop。</li><li>Props 是只读的时间快照：每次渲染都会收到新版本的 props。</li><li>你不能改变 props。当你需要交互性时，你可以设置 state。</li></ul><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="摘要-1"><a href="#摘要-1" class="headerlink" title="摘要"></a>摘要</h2><ul><li>在 React，你可以使用 JavaScript 来控制分支逻辑。</li><li>你可以使用 <code>if</code> 语句来选择性地返回 JSX 表达式。</li><li>你可以选择性地将一些 JSX 赋值给变量，然后用大括号将其嵌入到其他 JSX 中。</li><li>在 JSX 中，<code>&#123;cond ? &lt;A /&gt; : &lt;B /&gt;&#125;</code> 表示 <em>“当 <code>cond</code> 为真值时, 渲染 <code>&lt;A /&gt;</code>，否则 <code>&lt;B /&gt;</code>”</em>。</li><li>在 JSX 中，<code>&#123;cond &amp;&amp; &lt;A /&gt;&#125;</code> 表示 <em>“当 <code>cond</code> 为真值时, 渲染 <code>&lt;A /&gt;</code>，否则不进行渲染”</em>。</li><li>快捷的表达式很常见，但如果你更倾向于使用 <code>if</code>，你也可以不使用它们，。</li></ul><h1 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h1><p>用 <code>key</code> 保持列表项的顺序 </p><h3 id="如何设定-key-值"><a href="#如何设定-key-值" class="headerlink" title="如何设定 key 值"></a>如何设定 <code>key</code> 值</h3><p>不同来源的数据往往对应不同的 key 值获取方式：</p><ul><li><strong>来自数据库的数据：</strong> 如果你的数据是从数据库中获取的，那你可以直接使用数据表中的主键，因为它们天然具有唯一性。</li><li><strong>本地产生数据：</strong> 如果你数据的产生和保存都在本地（例如笔记软件里的笔记），那么你可以使用一个自增计数器或者一个类似 <a href="https://www.npmjs.com/package/uuid"><code>uuid</code></a> 的库来生成 key。</li></ul><h3 id="key-需要满足的条件"><a href="#key-需要满足的条件" class="headerlink" title="key 需要满足的条件"></a>key 需要满足的条件</h3><ul><li><strong>key 值在兄弟节点之间必须是唯一的。</strong> 不过不要求全局唯一，在不同的数组中可以使用相同的 key。</li><li><strong>key 值不能改变</strong>，否则就失去了使用 key 的意义！所以千万不要在渲染时动态地生成 key。</li></ul><blockquote><p>请不要在运行过程中动态地产生 key，像是 <code>key=&#123;Math.random()&#125;</code> 这种方式。这会导致每次重新渲染后的 key 值都不一样，从而使得所有的组件和 DOM 元素每次都要重新创建。这不仅会造成运行变慢的问题，更有可能导致用户输入的丢失。所以，使用能从给定数据中稳定取得的值才是明智的选择。</p></blockquote><blockquote><p>有一点需要注意，组件不会把 <code>key</code> 当作 props 的一部分。Key 的存在只对 React 本身起到提示作用。如果你的组件需要一个 ID，那么请把它作为一个单独的 prop 传给组件： <code>&lt;Profile key=&#123;id&#125; userId=&#123;id&#125; /&gt;</code>。</p></blockquote><h2 id="摘要-2"><a href="#摘要-2" class="headerlink" title="摘要"></a>摘要</h2><p>在这篇文章中，你学习了：</p><ul><li>如何从组件中抽离出数据，并把它们放入像数组、对象这样的数据结构中。</li><li>如何使用 JavaScript 的 <code>map()</code> 方法来生成一组相似的组件。</li><li>如何使用 JavaScript 的 <code>filter()</code> 方法来筛选数组。</li><li>为何以及如何给集合中的每个组件设置一个 <code>key</code> 值：它使 React 能追踪这些组件，即便后者的位置或数据发生了变化。</li><li></li></ul><h1 id="保持组件纯粹"><a href="#保持组件纯粹" class="headerlink" title="保持组件纯粹"></a>保持组件纯粹</h1><h2 id="副作用：（不符合）预期的后果"><a href="#副作用：（不符合）预期的后果" class="headerlink" title="副作用：（不符合）预期的后果"></a>副作用：（不符合）预期的后果</h2><p>React 的渲染过程必须自始至终是纯粹的。组件应该只 <strong>返回</strong> 它们的 JSX，而不 <strong>改变</strong> 在渲染前，就已存在的任何对象或变量 — 这将会使它们变得不纯粹！</p><p>以下是违反这一规则的组件示例：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> guest = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Cup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// Bad: changing a preexisting variable!</span><br>  guest = guest + <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Tea cup for guest #&#123;guest&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">TeaSet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Cup</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="摘要-3"><a href="#摘要-3" class="headerlink" title="摘要"></a>摘要</h2><ul><li>一个组件必须是纯粹的，就意味着：<ul><li><strong>只负责自己的任务。</strong> 它不会更改在该函数调用前就已存在的对象或变量。</li><li><strong>输入相同，则输出相同。</strong> 给定相同的输入，组件应该总是返回相同的 JSX。</li></ul></li><li>渲染随时可能发生，因此组件不应依赖于彼此的渲染顺序。</li><li>你不应该改变任何用于组件渲染的输入。这包括 props、state 和 context。通过 <a href="https://react.docschina.org/learn/state-a-components-memory">“设置” state</a> 来更新界面，而不要改变预先存在的对象。</li><li>努力在你返回的 JSX 中表达你的组件逻辑。当你需要“改变事物”时，你通常希望在事件处理程序中进行。作为最后的手段，你可以使用 <code>useEffect</code>。</li><li>编写纯函数需要一些练习，但它充分释放了 React 范式的能力。</li></ul><h2 id="构建-state-的原则"><a href="#构建-state-的原则" class="headerlink" title="构建 state 的原则"></a>构建 state 的原则</h2><p>当你编写一个存有 state 的组件时，你需要选择使用多少个 state 变量以及它们都是怎样的数据格式。尽管选择次优的 state 结构下也可以编写正确的程序，但有几个原则可以指导您做出更好的决策：</p><ol><li><strong>合并关联的 state</strong>。如果你总是同时更新两个或更多的 state 变量，请考虑将它们合并为一个单独的 state 变量。</li><li><strong>避免互相矛盾的 state</strong>。当 state 结构中存在多个相互矛盾或“不一致”的 state 时，你就可能为此会留下隐患。应尽量避免这种情况。</li><li><strong>避免冗余的 state</strong>。如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应将这些信息放入该组件的 state 中。</li><li><strong>避免重复的 state</strong>。当同一数据在多个 state 变量之间或在多个嵌套对象中重复时，这会很难保持它们同步。应尽可能减少重复。</li><li><strong>避免深度嵌套的 state</strong>。深度分层的 state 更新起来不是很方便。如果可能的话，最好以扁平化方式构建 state。</li></ol><h2 id="合并关联的-state"><a href="#合并关联的-state" class="headerlink" title="合并关联的 state"></a>合并关联的 state</h2><p>有时候你可能会不确定是使用单个 state 变量还是多个 state 变量。</p><p>你会像下面这样做吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [x, setX] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">const</span> [y, setY] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>或这样？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [position, setPosition] = <span class="hljs-title function_">useState</span>(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">y</span>: <span class="hljs-number">0</span> &#125;);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/forest9691/picgo-img/raw/master/images/2023-12-04-14-22-18.png" alt="image-20231204142214507"></p><blockquote><p>红点根据鼠标坐标移动</p></blockquote><p>另一种情况是，你将数据整合到一个对象或一个数组中时，你不知道需要多少个 state 片段。例如，当你有一个用户可以添加自定义字段的表单时，这将会很有帮助。</p><h2 id="避免矛盾的-state"><a href="#避免矛盾的-state" class="headerlink" title="避免矛盾的 state"></a>避免矛盾的 state</h2><p>下面是带有 <code>isSending</code> 和 <code>isSent</code> 两个 state 变量的酒店反馈表单：</p><p><strong>因为 <code>isSending</code> 和 <code>isSent</code> 不应同时为 <code>true</code>，所以最好用一个 <code>status</code> 变量来代替它们，这个 state 变量可以采取三种有效状态其中之一</strong>：<code>&#39;typing&#39;</code> (初始), <code>&#39;sending&#39;</code>, 和 <code>&#39;sent&#39;</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [text, setText] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [status, setStatus] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;typing&#x27;</span>);<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleSubmit</span>(<span class="hljs-params">e</span>) &#123;<br>  e.<span class="hljs-title function_">preventDefault</span>();<br>  <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sending&#x27;</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendMessage</span>(text);<br>  <span class="hljs-title function_">setStatus</span>(<span class="hljs-string">&#x27;sent&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> isSending = status === <span class="hljs-string">&#x27;sending&#x27;</span>;<br><span class="hljs-keyword">const</span> isSent = status === <span class="hljs-string">&#x27;sent&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="避免冗余的-state"><a href="#避免冗余的-state" class="headerlink" title="避免冗余的 state"></a>避免冗余的 state</h2><p>如果你能在渲染期间从组件的 props 或其现有的 state 变量中计算出一些信息，则不应该把这些信息放到该组件的 state 中。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> [firstName, setFirstName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [lastName, setLastName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><span class="hljs-keyword">const</span> [fullName, setFullName] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;&#x27;</span>); <span class="hljs-comment">// 避免冗余的 state </span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleFirstNameChange</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">setFirstName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br><span class="hljs-title function_">setFullName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27; &#x27;</span> + lastName);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">handleLastNameChange</span>(<span class="hljs-params">e</span>) &#123;<br><span class="hljs-title function_">setLastName</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br><span class="hljs-title function_">setFullName</span>(firstName + <span class="hljs-string">&#x27; &#x27;</span> + e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="摘要-4"><a href="#摘要-4" class="headerlink" title="摘要"></a>摘要</h2><ul><li>如果两个 state 变量总是一起更新，请考虑将它们合并为一个。</li><li>仔细选择你的 state 变量，以避免创建“极难处理”的 state。</li><li>用一种减少出错更新的机会的方式来构建你的 state。</li><li>避免冗余和重复的 state，这样您就不需要保持同步。</li><li>除非您特别想防止更新，否则不要将 props <strong>放入</strong> state 中。</li><li>对于选择类型的 UI 模式，请在 state 中保存 ID 或索引而不是对象本身。</li><li>如果深度嵌套 state 更新很复杂，请尝试将其展开扁平化。</li></ul><h1 id="在组件间共享状态"><a href="#在组件间共享状态" class="headerlink" title="在组件间共享状态"></a>在组件间共享状态</h1><p>有时候，你希望两个组件的状态始终同步更改。要实现这一点，可以将相关 state 从这两个组件上移除，并把 state 放到它们的公共父级，再通过 props 将 state 传递给这两个组件。这被称为“状态提升”，这是编写 React 代码时常做的事。</p><h1 id="对-state-进行保留和重置"><a href="#对-state-进行保留和重置" class="headerlink" title="对 state 进行保留和重置"></a>对 state 进行保留和重置</h1><p>各个组件的 state 是各自独立的。根据组件在 UI 树中的位置，React 可以跟踪哪些 state 属于哪个组件。你可以控制在重新渲染过程中何时对 state 进行保留和重置。</p><p>React 会为 UI 中的组件结构构建 <a href="https://react.docschina.org/learn/understanding-your-ui-as-a-tree#the-render-tree">渲染树</a>。</p><p>当向一个组件添加状态时，那么可能会认为状态“存在”在组件内。但实际上，状态是由 React 保存的。React 通过组件在渲染树中的位置将它保存的每个状态与正确的组件关联起来。</p><p>只有当在树中相同的位置渲染相同的组件时，React 才会一直保留着组件的 state。</p><blockquote><p>注意，当你停止渲染第二个计数器的那一刻，它的 state 完全消失了。这是因为 React 在移除一个组件时，也会销毁它的 state。</p></blockquote><h2 id="相同位置的相同组件会使得-state-被保留下来"><a href="#相同位置的相同组件会使得-state-被保留下来" class="headerlink" title="相同位置的相同组件会使得 state 被保留下来"></a>相同位置的相同组件会使得 state 被保留下来</h2><p>相同组件的包括自定义的或内置的.</p><h2 id="相同位置的不同组件会使-state-重置"><a href="#相同位置的不同组件会使-state-重置" class="headerlink" title="相同位置的不同组件会使 state 重置"></a>相同位置的不同组件会使 state 重置</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPaused, setIsPaused] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPaused ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>待会见！<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> </span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> /&gt;</span> </span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">checked</span>=<span class="hljs-string">&#123;isPaused&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;e</span> =&gt;</span> &#123;</span><br><span class="language-xml">            setIsPaused(e.target.checked)</span><br><span class="language-xml">          &#125;&#125;</span><br><span class="language-xml">        /&gt;</span><br><span class="language-xml">        休息一下</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>一般来说，<strong>如果你想在重新渲染时保留 state，几次渲染中的树形结构就应该相互“匹配”</strong>。结构不同就会导致 state 的销毁，因为 React 会在将一个组件从树中移除时销毁它的 state。</p><p>在相同位置重置 state </p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 这是在一个大括号只，认为是一个组件 --&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Chat</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Chat.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ContactList</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./ContactList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Messenger</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [to, setTo] = <span class="hljs-title function_">useState</span>(contacts[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ContactList</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;to.email&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">contacts</span>=<span class="hljs-string">&#123;contacts&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">selectedContact</span>=<span class="hljs-string">&#123;to&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        <span class="hljs-attr">onSelect</span>=<span class="hljs-string">&#123;contact</span> =&gt;</span> setTo(contact)&#125;</span><br><span class="language-xml">      /&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Chat</span> <span class="hljs-attr">contact</span>=<span class="hljs-string">&#123;to&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  )<br>&#125;<br><br><span class="hljs-keyword">const</span> contacts = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Taylor&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;taylor@mail.com&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;alice@mail.com&#x27;</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-attr">email</span>: <span class="hljs-string">&#x27;bob@mail.com&#x27;</span> &#125;<br>];<br></code></pre></td></tr></table></figure><p>将组件渲染在不同的位置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 这个解决方案在你只有少数几个独立的组件渲染在相同的位置时会很方便。这个例子中只有 2 个组件，所以在 JSX 里将它们分开进行渲染并不麻烦。</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 这是分别在二个大括号只，认为是二个组件 --&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">      &#123;!isPlayerA &amp;&amp;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>使用 key 来重置 state</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Scoreboard</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [isPlayerA, setIsPlayerA] = <span class="hljs-title function_">useState</span>(<span class="hljs-literal">true</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      &#123;isPlayerA ? (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Taylor&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Taylor&quot;</span> /&gt;</span></span><br><span class="language-xml">      ) : (</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Counter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;Sarah&quot;</span> <span class="hljs-attr">person</span>=<span class="hljs-string">&quot;Sarah&quot;</span> /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setIsPlayerA(!isPlayerA);</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一位玩家！</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="摘要-5"><a href="#摘要-5" class="headerlink" title="摘要"></a>摘要</h2><ul><li>只要在相同位置渲染的是相同组件， React 就会保留状态。</li><li>state 不会被保存在 JSX 标签里。它与你在树中放置该 JSX 的位置相关联。</li><li>你可以通过为一个子树指定一个不同的 key 来重置它的 state。</li><li>不要嵌套组件的定义，否则你会意外地导致 state 被重置。</li></ul><h1 id="迁移状态逻辑至-Reducer-中"><a href="#迁移状态逻辑至-Reducer-中" class="headerlink" title="迁移状态逻辑至 Reducer 中"></a>迁移状态逻辑至 Reducer 中</h1><p>对于拥有许多状态更新逻辑的组件来说，过于分散的事件处理程序可能会令人不知所措。对于这种情况，你可以将组件的所有状态更新逻辑整合到一个外部函数中，这个函数叫作 <strong>reducer</strong>。</p><h1 id="使用-Context-深层传递参数"><a href="#使用-Context-深层传递参数" class="headerlink" title="使用 Context 深层传递参数"></a>使用 Context 深层传递参数</h1><p>通常来说，你会通过 props 将信息从父组件传递到子组件。但是，如果你必须通过许多中间组件向下传递 props，或是在你应用中的许多组件需要相同的信息，传递 props 会变的十分冗长和不便。<strong>Context</strong> 允许父组件向其下层无论多深的任何组件提供信息，而无需通过 props 显式传递。</p><h2 id="Context：传递-props-的另一种方法"><a href="#Context：传递-props-的另一种方法" class="headerlink" title="Context：传递 props 的另一种方法"></a>Context：传递 props 的另一种方法</h2><p>Context 让父组件可以为它下面的整个组件树提供数据。Context 有很多种用途。这里就有一个示例。思考一下这个 <code>Heading</code> 组件接收一个 <code>level</code> 参数来决定它标题尺寸的场景：</p><h2 id="写在你使用-context-之前"><a href="#写在你使用-context-之前" class="headerlink" title="写在你使用 context 之前"></a>写在你使用 context 之前</h2><p>使用 Context 看起来非常诱人！然而，这也意味着它也太容易被过度使用了。<strong>如果你只想把一些 props 传递到多个层级中，这并不意味着你需要把这些信息放到 context 里。</strong></p><p>在使用 context 之前，你可以考虑以下几种替代方案：</p><ol><li><strong>从 <a href="https://react.docschina.org/learn/passing-props-to-a-component">传递 props</a> 开始。</strong> 如果你的组件看起来不起眼，那么通过十几个组件向下传递一堆 props 并不罕见。这有点像是在埋头苦干，但是这样做可以让哪些组件用了哪些数据变得十分清晰！维护你代码的人会很高兴你用 props 让数据流变得更加清晰。</li><li><strong>抽象组件并 <a href="https://react.docschina.org/learn/passing-props-to-a-component#passing-jsx-as-children">将 JSX 作为 <code>children</code> 传递</a> 给它们。</strong> 如果你通过很多层不使用该数据的中间组件（并且只会向下传递）来传递数据，这通常意味着你在此过程中忘记了抽象组件。举个例子，你可能想传递一些像 <code>posts</code> 的数据 props 到不会直接使用这个参数的组件，类似 <code>&lt;Layout posts=&#123;posts&#125; /&gt;</code>。取而代之的是，让 <code>Layout</code> 把 <code>children</code> 当做一个参数，然后渲染 <code>&lt;Layout&gt;&lt;Posts posts=&#123;posts&#125; /&gt;&lt;/Layout&gt;</code>。这样就减少了定义数据的组件和使用数据的组件之间的层级。</li></ol><p>如果这两种方法都不适合你，再考虑使用 context。</p><h2 id="Context-的使用场景"><a href="#Context-的使用场景" class="headerlink" title="Context 的使用场景"></a>Context 的使用场景</h2><ul><li><strong>主题：</strong> 如果你的应用允许用户更改其外观（例如暗夜模式），你可以在应用顶层放一个 context provider，并在需要调整其外观的组件中使用该 context。</li><li><strong>当前账户：</strong> 许多组件可能需要知道当前登录的用户信息。将它放到 context 中可以方便地在树中的任何位置读取它。某些应用还允许你同时操作多个账户（例如，以不同用户的身份发表评论）。在这些情况下，将 UI 的一部分包裹到具有不同账户数据的 provider 中会很方便。</li><li><strong>路由：</strong> 大多数路由解决方案在其内部使用 context 来保存当前路由。这就是每个链接“知道”它是否处于活动状态的方式。如果你创建自己的路由库，你可能也会这么做。</li><li><strong>状态管理：</strong> 随着你的应用的增长，最终在靠近应用顶部的位置可能会有很多 state。许多遥远的下层组件可能想要修改它们。通常 <a href="https://react.docschina.org/learn/scaling-up-with-reducer-and-context">将 reducer 与 context 搭配使用</a>来管理复杂的状态并将其传递给深层的组件来避免过多的麻烦。</li></ul><p>Context 不局限于静态值。如果你在下一次渲染时传递不同的值，React 将会更新读取它的所有下层组件！这就是 context 经常和 state 结合使用的原因。</p><p>一般而言，如果树中不同部分的远距离组件需要某些信息，context 将会对你大有帮助。</p><h2 id="摘要-6"><a href="#摘要-6" class="headerlink" title="摘要"></a>摘要</h2><ul><li>Context 使组件向其下方的整个树提供信息。</li><li>传递 Context 的方法:<ol><li>通过 <code>export const MyContext = createContext(defaultValue)</code> 创建并导出 context。</li><li>在无论层级多深的任何子组件中，把 context 传递给 <code>useContext(MyContext)</code> Hook 来读取它。</li><li>在父组件中把 children 包在 <code>&lt;MyContext.Provider value=&#123;...&#125;&gt;</code> 中来提供 context。</li></ol></li><li>Context 会穿过中间的任何组件。</li><li>Context 可以让你写出 “较为通用” 的组件。</li><li>在使用 context 之前，先试试传递 props 或者将 JSX 作为 <code>children</code> 传递。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Children</title>
      <link href="/2023/12/03/Children/"/>
      <url>/2023/12/03/Children/</url>
      
        <content type="html"><![CDATA[<h2 id="Children"><a href="#Children" class="headerlink" title="Children"></a>Children</h2><p>Children提供了以下几种API</p><ol><li>Children.map()</li><li>Children.forEach()</li><li>Children.count()</li><li>Children.only()</li><li>Children.toArray()</li></ol><h3 id="组合组件"><a href="#组合组件" class="headerlink" title="组合组件"></a>组合组件</h3><p>需求：希望对每一个<code>&lt;p&gt;</code>标签增加一个<code>&lt;div&gt;</code>标签。可以在<code>&lt;div&gt;</code>中使用<code>Children.map()</code>进行包装子节点</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RowList</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第二项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第三项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RowList</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上方向可以转换成使用<code>&lt;Row&gt;</code>来包裹<code>&lt;p&gt;</code>, 在<code>&lt;Row&gt;</code>组件内使用<code>&lt;div&gt;</code>包裹。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RowList</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第二项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第三项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">RowList</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面这个属于是静态的子组件</p></blockquote><h3 id="接收对象数组作为参数"><a href="#接收对象数组作为参数" class="headerlink" title="接收对象数组作为参数"></a>接收对象数组作为参数</h3><p>使用属性传递数据，在组件内部使用<code>props.rows</code>对数据进行处理包裹。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">RowList</span>, <span class="hljs-title class_">Row</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./RowList.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RowList</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&#123;[</span></span></span><br><span class="hljs-tag"><span class="language-xml">      &#123; <span class="hljs-attr">id:</span> &#x27;<span class="hljs-attr">first</span>&#x27;, <span class="hljs-attr">content:</span> &lt;<span class="hljs-attr">p</span>&gt;</span>这是第一项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> &#125;,</span><br><span class="language-xml">      &#123; id: &#x27;second&#x27;, content: <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第二项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> &#125;,</span><br><span class="language-xml">      &#123; id: &#x27;third&#x27;, content: <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第三项。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span> &#125;</span><br><span class="language-xml">    ]&#125; /&gt;</span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>上面属性属于是动态的子组件</p></blockquote><h3 id="调用渲染属性以自定义渲染，prop-render"><a href="#调用渲染属性以自定义渲染，prop-render" class="headerlink" title="调用渲染属性以自定义渲染，prop render"></a>调用渲染属性以自定义渲染，prop render</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">TabSwitcher</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./TabSwitcher.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TabSwitcher</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">tabIds</span>=<span class="hljs-string">&#123;[</span>&#x27;<span class="hljs-attr">first</span>&#x27;, &#x27;<span class="hljs-attr">second</span>&#x27;, &#x27;<span class="hljs-attr">third</span>&#x27;]&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">getHeader</span>=<span class="hljs-string">&#123;tabId</span> =&gt;</span> &#123;</span><br><span class="language-xml">        return tabId[0].toUpperCase() + tabId.slice(1);</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">      renderContent=&#123;tabId =&gt; &#123;</span><br><span class="language-xml">        return <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is the &#123;tabId&#125; item.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>;</span><br><span class="language-xml">      &#125;&#125;</span><br><span class="language-xml">    /&gt;</span><br>  );<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>上面属性属于是动态的子组件, 扩展性更好</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过以上三个替换使用<code>Children</code>的例子来看，原本有五个<code>API</code>,由于使用上面的的方式可以替换掉<code>forEach()、map()</code>二个，其它的三个可以由替换掉的这二个来获得。比如要获取子组件的个数可以使用<code>props.rows.length</code>，再比如获取是否唯一的子组件可以使用<code>props.rows.length === 1</code>来获取。还有一个是<code>Children.toArray()</code>这个不需要进行转换了，<code>props.rows</code>本来就定义为是一个数据。</p><p>以上三种代码片段也是三种组件编码风格，还有一种是高阶组件编码风格。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cloneElement</title>
      <link href="/2023/12/03/cloneElement/"/>
      <url>/2023/12/03/cloneElement/</url>
      
        <content type="html"><![CDATA[<h2 id="cloneElement-element-props-…children"><a href="#cloneElement-element-props-…children" class="headerlink" title="cloneElement(element, props, …children)"></a>cloneElement(element, props, …children)</h2><p><code>cloneElement</code> 允许你基于 <code>element</code> 创建一个新的 React 元素，但新元素具有不同的 <code>props</code> 和 <code>children</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> clonedElement = <span class="hljs-title function_">cloneElement</span>(element, props, ...children);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">element: element 参数必须是一个有效的 React 元素;</span><br><span class="hljs-comment">props: props 参数必须是一个对象或 null;</span><br><span class="hljs-comment">children: 零个或多个子节点</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; cloneElement &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-comment">// ...</span><br><span class="hljs-keyword">const</span> clonedElement = <span class="hljs-title function_">cloneElement</span>(<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Row</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;Cabbage&quot;</span>&gt;</span></span><br><span class="language-xml">    Hello</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">Row</span>&gt;</span></span>,<br>  &#123; <span class="hljs-attr">isHighlighted</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-string">&#x27;Goodbye&#x27;</span><br>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clonedElement); <span class="hljs-comment">// &lt;Row title=&quot;Cabbage&quot; isHighlighted=&#123;true&#125;&gt;Goodbye&lt;/Row&gt;</span><br></code></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p><code>cloneElement</code> 返回一个具有一些属性的 React element 对象：</p><ul><li><code>type</code>：与 <code>element.type</code> 相同。</li><li><code>props</code>：将 <code>element.props</code> 与你传递的 <code>props</code> 浅合并的结果。</li><li><code>ref</code>：原始的 <code>element.ref</code>，除非它被 <code>props.ref</code> 覆盖。</li><li><code>key</code>：原始的 <code>element.key</code>，除非它被 <code>props.key</code> 覆盖。</li></ul><h3 id="cloneElement举例"><a href="#cloneElement举例" class="headerlink" title="cloneElement举例"></a>cloneElement举例</h3><p>下面是分层后的组件，如果想看未分层的请看下面提供案例</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Children</span>, cloneElement, useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; children /* <span class="hljs-variable language_">this</span>.props.children */ &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;Children.map(children, (child, index) =&gt;</span><br><span class="language-xml">        cloneElement(child, &#123;</span><br><span class="language-xml">          isHighlighted: index === selectedIndex </span><br><span class="language-xml">        &#125;)</span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> &#123;</span><br><span class="language-xml">        setSelectedIndex(i =&gt;</span><br><span class="language-xml">          (i + 1) % Children.count(children)</span><br><span class="language-xml">        );</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="通过-props-传递数据"><a href="#通过-props-传递数据" class="headerlink" title="通过 props 传递数据"></a>通过 props 传递数据</h3><p>接受类似 <code>renderItem</code> 这样的 <em>render prop</em> 代替 <code>cloneElement</code> 的用法。在这里，<code>List</code> 接收 <code>renderItem</code> 作为 props。<code>List</code> 为数组每一项调用 <code>renderItem</code>，并传递 <code>isHighlighted</code> 作为参数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items, renderItem &#125;</span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;items.map((item, index) =&gt; &#123;</span><br><span class="language-xml">        const isHighlighted = index === selectedIndex;</span><br><span class="language-xml">        return renderItem(item, isHighlighted);</span><br><span class="language-xml">      &#125;</span><br><span class="language-xml">    )</span><br><span class="language-xml">  &#125;</span><br></code></pre></td></tr></table></figure><p><code>renderItem</code> 属性称为“渲染属性”，因为它是决定如何渲染某些内容的属性。例如，你可以传递一个 <code>renderItem</code> 实现使用给定的 <code>isHighlighted</code> 值呈现 <code>&lt;Row&gt;</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">List</span><br>  items=&#123;products&#125;<br>  renderItem=&#123;<span class="hljs-function">(<span class="hljs-params">product, isHighlighted</span>) =&gt;</span><br>    &lt;!-- <span class="hljs-title class_">Row</span>组件每次更新都会重新渲染，<span class="hljs-title class_">List</span>内部对数据进行了map操作 --&gt;<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">isHighlighted</span>=<span class="hljs-string">&#123;isHighlighted&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    /&gt;</span></span><br>  &#125;<br>/&gt;<br></code></pre></td></tr></table></figure><blockquote><p>渲染属性可以替代 <code>cloneElement()</code>、<code>Children</code></p></blockquote><h3 id="通过-context-传递数据"><a href="#通过-context-传递数据" class="headerlink" title="通过 context 传递数据"></a>通过 context 传递数据</h3><p><code>cloneElement</code> 的另一种替代方法是 <a href="https://react.docschina.org/learn/passing-data-deeply-with-context">通过 context 传递数据</a>。</p><p>例如，你可以调用 <a href="https://react.docschina.org/reference/react/createContext"><code>createContext</code></a> 来定义一个 <code>HighlightContext</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">export const HighlightContext = createContext(false);<br></code></pre></td></tr></table></figure><p><code>List</code> 组件可以将其呈现的每个 item 传递到 <code>HighlightContext</code> provider 中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params">&#123; items, renderItem &#125;</span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;items.map((item, index) =&gt; &#123;</span><br><span class="language-xml">        const isHighlighted = index === selectedIndex;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">HighlightContext.Provider</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;isHighlighted&#125;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!--</span></span><br><span class="hljs-comment"><span class="language-xml">方法调用得到一个组件</span></span><br><span class="hljs-comment"><span class="language-xml">    --&gt;</span></span><br><span class="language-xml">            &#123;renderItem(item)&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">          <span class="hljs-tag">&lt;/<span class="hljs-name">HighlightContext.Provider</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        );</span><br><span class="language-xml"></span><br><span class="language-xml">      &#125;)&#125;</span><br></code></pre></td></tr></table></figure><p>通过这种方法，<code>Row</code> 不需要接收 <code>isHighlighted</code>属性，因为它可以从 context 中读取：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Row</span>(<span class="hljs-params">&#123; title &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> isHighlighted = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">HighlightContext</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;    <br></code></pre></td></tr></table></figure><p>这允许调用组件时无需关心是否将 <code>isHighlighted</code> 传递给了 <code>&lt;Row&gt;</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">List</span><br>  items=&#123;products&#125;<br>  renderItem=&#123;<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Row</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span> /&gt;</span></span><br>  &#125;<br>/&gt;<br></code></pre></td></tr></table></figure><h3 id="将逻辑提取到自定义-Hook-中"><a href="#将逻辑提取到自定义-Hook-中" class="headerlink" title="将逻辑提取到自定义 Hook 中"></a>将逻辑提取到自定义 Hook 中</h3><p>你可以尝试的另一种方法是将“非视觉”部分的逻辑提取到你的自定义 Hook 中，并使用 Hook 的返回值来决定渲染什么。例如，你可以编写一个 <code>useList</code> 自定义 Hook，如下所示：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">useList</span>(<span class="hljs-params">items</span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">onNext</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSelectedIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span><br>      (i + <span class="hljs-number">1</span>) % items.<span class="hljs-property">length</span><br>    );<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> selected = items[selectedIndex];<br>  <span class="hljs-keyword">return</span> [selected, onNext];<br>&#125;<br></code></pre></td></tr></table></figure><p>然后你可以像这样使用它：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 自定义Hook是封装Hook逻辑的方式</span><br>  <span class="hljs-keyword">const</span> [selected, onNext] = <span class="hljs-title function_">useList</span>(products);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;products.map(product =&gt;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          <span class="hljs-attr">isHighlighted</span>=<span class="hljs-string">&#123;selected</span> === <span class="hljs-string">product&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">        /&gt;</span></span><br><span class="language-xml">      )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onNext&#125;</span>&gt;</span></span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;useState, useCallback&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./List.js&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Row</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Row.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; products &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> onClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setSelectedIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span><br>        (i + <span class="hljs-number">1</span>) % products.<span class="hljs-property">length</span><br>      );<br>  &#125;,[]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 这个组件是没有分层的组件 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;products.map((product, index) =&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">isHighlighted</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">index</span> === <span class="hljs-string">selectedIndex</span> &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码是分成二个组件还是分成一个组件？</p><p>如下面这种分层是没有意义的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123;useState, useCallback, memo&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Row</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Row.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; products &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Button</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">&#123;onClick, children&#125;</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;button&quot;</span>)<br>  <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  )<br>&#125;);<br><br><span class="hljs-keyword">const</span> L = <span class="hljs-keyword">function</span>(<span class="hljs-params">&#123; children &#125;</span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">&#123;children&#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">      &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> onClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-title function_">setSelectedIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span><br>        (i + <span class="hljs-number">1</span>) % products.<span class="hljs-property">length</span><br>      );<br>  &#125;,[]);<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 如果这里使用的不是第三方组件库，仅仅是把className封装起来这么分是没有意义的 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List</span>&gt;</span></span><br><span class="language-xml">        &#123;products.map((product, index) =&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span> </span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">isHighlighted</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">index</span> === <span class="hljs-string">selectedIndex</span> &#125;</span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span>   </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 如果这里使用的不是第三方组件库，仅仅是把className封装起来这么分是没有意义的 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将按钮封装到<code>&lt;List&gt;</code>组件中，使它们成为一个组件,使用的是<code>cloneElement</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useCallback, memo, <span class="hljs-title class_">Children</span>, cloneElement &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Row</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Row.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; products &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">const</span> onClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSelectedIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span><br>      (i + <span class="hljs-number">1</span>) % products.<span class="hljs-property">length</span><br>    );<br>  &#125;, []);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          Children.map(children, (children, index) =&gt; &#123;</span><br><span class="language-xml">            return cloneElement(children, &#123;</span><br><span class="language-xml">              isHighlighted: index === selectedIndex</span><br><span class="language-xml">            &#125;);</span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;/* 这里没有必要为了className再封装了， */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List</span>&gt;</span></span><br><span class="language-xml">        &#123;products.map((product, index) =&gt;</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>下面不使用<code>cloneElement</code></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useCallback, memo, <span class="hljs-title class_">Children</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Row</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Row.js&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; products &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./data.js&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">List</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">&#123; products, renderRow &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> [selectedIndex, setSelectedIndex] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>  <br>  <span class="hljs-keyword">const</span> onClick = <span class="hljs-title function_">useCallback</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setSelectedIndex</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span><br>      (i + <span class="hljs-number">1</span>) % products.<span class="hljs-property">length</span><br>    );<br>  &#125;, [products]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;List&quot;</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">          products.map((product, index) =&gt; &#123;</span><br><span class="language-xml">            const isHighlighted = index === selectedIndex;</span><br><span class="language-xml">            return renderRow(product, isHighlighted, selectedIndex);</span><br><span class="language-xml">          &#125;)</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">      &#123;/* 这里没有必要为了className再封装了， */&#125;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">        下一步</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">products</span>=<span class="hljs-string">&#123;products&#125;</span> <span class="hljs-attr">renderRow</span>=<span class="hljs-string">&#123;(product,</span> <span class="hljs-attr">isHighlighted</span>)=&gt;</span>&#123;</span><br><span class="language-xml">        return (</span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">Row</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;product.title&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">            <span class="hljs-attr">isHighlighted</span>=<span class="hljs-string">&#123;isHighlighted&#125;</span></span></span><br><span class="hljs-tag"><span class="language-xml">          /&gt;</span></span><br><span class="language-xml">        )</span><br><span class="language-xml">      &#125;&#125;&gt;</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">List</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React快速入门</title>
      <link href="/2023/12/02/React%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/12/02/React%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="创建和嵌套组件"><a href="#创建和嵌套组件" class="headerlink" title="创建和嵌套组件"></a>创建和嵌套组件</h2><p>React 应用程序是由 <strong>组件</strong> 组成的。一个组件是 UI（用户界面）的一部分，它拥有自己的逻辑和外观(参考下面的界面更新)。组件可以小到一个按钮，也可以大到整个页面。</p><p>React 组件是返回标签的 JavaScript 函数：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>I&#x27;m a button<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加样式"><a href="#添加样式" class="headerlink" title="添加样式"></a>添加样式</h2><p>在 React 中，你可以使用 <code>className</code> 来指定一个 CSS 的 class。它与 HTML 的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/class"><code>class</code></a> 属性的工作方式相同：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;img className=<span class="hljs-string">&quot;avatar&quot;</span> /&gt; <span class="hljs-comment">// 这种方式可以用&lt;link&gt;引入css文件</span><br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Style</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;../Style.less&quot;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Img</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">classname</span>=<span class="hljs-string">&#123;Style.avatar&#125;</span> /&gt;</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后，你可以在一个单独的 CSS 文件中为它编写 CSS 规则：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/* In your CSS */</span><br><span class="hljs-selector-class">.avatar</span> &#123;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h2><p>JSX 会让你把标签放到<code> JavaScript</code>中。而大括号会让你 “回到” JavaScript 中，这样你就可以从你的代码中嵌入一些变量并展示给用户。</p><p>例如，这将显示 <code>user.name</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> button = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>button<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>;<br><span class="hljs-comment">// or</span><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">    &#123;</span><br><span class="language-xml">        //这里是JS语法，所以可以写任意的表达式</span><br><span class="language-xml">    user.name </span><br><span class="language-xml">    &#125; </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;avatar&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">src</span>=<span class="hljs-string">&#123;user.imageUrl&#125;</span> // <span class="hljs-attr">你还可以将JSX属性</span> “<span class="hljs-attr">转义到</span> <span class="hljs-attr">JavaScript</span>”，<span class="hljs-attr">但你必须使用大括号</span> **<span class="hljs-attr">而非</span>** <span class="hljs-attr">引号</span>。</span></span><br><span class="hljs-tag"><span class="language-xml">    <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span></span></span><br><span class="hljs-tag"><span class="language-xml">      // <span class="hljs-attr">上面第一个大括号表示的是让你回到javascript中语法编写中</span>。</span></span><br><span class="hljs-tag"><span class="language-xml">      // <span class="hljs-attr">上面第二个大括号表示的是一个对象</span>，<span class="hljs-attr">对象也是一个表达式的值</span></span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">width:</span> <span class="hljs-attr">user.imageSize</span>,</span></span><br><span class="hljs-tag"><span class="language-xml">      <span class="hljs-attr">height:</span> <span class="hljs-attr">user.imageSize</span></span></span><br><span class="hljs-tag"><span class="language-xml">    &#125;&#125;</span></span><br><span class="hljs-tag"><span class="language-xml">  /&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><p>React 没有特殊的语法来编写条件语句，因此你使用的就是普通的 JavaScript 代码。例如使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/if...else"><code>if</code></a> 语句根据条件引入 JSX：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">let</span> content;<br><span class="hljs-keyword">if</span> (isLoggedIn) &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  content = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span></span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> (<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;content&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>);<br></code></pre></td></tr></table></figure><p>如果你喜欢更为紧凑的代码，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Conditional_Operator">条件 <code>?</code> 运算符</a>。与 <code>if</code> 不同的是，它工作于 JSX 内部：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;&#123;isLoggedIn ? (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>) : (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">LoginForm</span> /&gt;</span></span>)&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>当你不需要 <code>else</code> 分支时，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Logical_AND#short-circuit_evaluation">逻辑 <code>&amp;&amp;</code> 语法</a>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;&#123;isLoggedIn &amp;&amp; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AdminPanel</span> /&gt;</span></span>&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="渲染列表"><a href="#渲染列表" class="headerlink" title="渲染列表"></a>渲染列表</h2><p>你将依赖 JavaScript 的特性，例如 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for"><code>for</code> 循环</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map">array 的 <code>map()</code> 函数</a> 来渲染组件列表。</p><p>假设你有一个产品数组：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> products = [<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Cabbage&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Garlic&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Apple&#x27;</span>, <span class="hljs-attr">id</span>: <span class="hljs-number">3</span> &#125;,<br>];<br></code></pre></td></tr></table></figure><p>在你的组件中，使用 <code>map()</code> 函数将这个数组转换为 <code>&lt;li&gt;</code> 标签构成的列表:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> listItems = products.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">product</span> =&gt;</span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;product.id&#125;</span>&gt;</span></span><br><span class="language-xml">    &#123;product.title&#125;</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>);<br><br><span class="hljs-keyword">return</span> ( <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>&#123;listItems&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span>);<br></code></pre></td></tr></table></figure><p>注意， <code>&lt;li&gt;</code> 有一个 <code>key</code> 属性。对于列表中的每一个元素，你都应该传递一个字符串或者数字给 <code>key</code>，用于在其兄弟节点中唯一标识该元素。通常 key 来自你的数据，比如数据库中的 ID。如果你在后续插入、删除或重新排序这些项目，React 将依靠你提供的 key 来思考发生了什么。</p><h2 id="响应事件"><a href="#响应事件" class="headerlink" title="响应事件"></a>响应事件</h2><p>你可以通过在组件中声明 <strong>事件处理</strong> 函数来响应事件：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You clicked me!&#x27;</span>)<br>  &#125;<br>  <span class="hljs-comment">// 下面的大括号是由标签语法回到javascript请求</span><br>  <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span>Click me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意，<code>onClick=&#123;handleClick&#125;</code> 的结尾没有小括号！不要 <strong>调用</strong> 事件处理函数：你只需 <strong>把函数传递给事件</strong> 即可。当用户点击按钮时 React 会调用你传递的事件处理函数。</p><h2 id="更新界面"><a href="#更新界面" class="headerlink" title="更新界面"></a>更新界面</h2><p>通常你会希望你的组件 “记住” 一些信息并展示出来，比如一个按钮被点击的次数。要做到这一点，你需要在你的组件中添加 <strong>state</strong>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 这里说明了组件拥有自己的外观或逻辑 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用-Hook"><a href="#使用-Hook" class="headerlink" title="使用 Hook"></a>使用 Hook</h2><p>「理解的重点」以 <code>use</code> 开头的函数被称为 <strong>Hook</strong>。<code>useState</code> 是 React 提供的一个内置 Hook。你可以在 <a href="https://react.docschina.org/reference/react">React API 参考</a> 中找到其他内置的 Hook。你也可以通过组合现有的 Hook 来编写属于你自己的 Hook。</p><p>Hook 比普通函数更为严格。你只能在你的组件（或其他 Hook）的 <strong>顶层</strong> 调用 Hook。如果你想在一个条件或循环中使用 <code>useState</code>，请提取一个新的组件并在组件内部使用它。</p><h2 id="组件间共享数据"><a href="#组件间共享数据" class="headerlink" title="组件间共享数据"></a>组件间共享数据</h2><p>在前面的示例中，每个 <code>MyButton</code> 都有自己独立的 <code>count</code>，当每个按钮被点击时，只有被点击按钮的 <code>count</code> 才会发生改变：</p><table><thead><tr><th align="center"><img src="https://react.docschina.org/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fsharing_data_child.dark.png&w=828&q=75" alt="" style="zoom:33%;" /></th><th align="center"><img src="https://react.docschina.org/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fsharing_data_child_clicked.dark.png&w=828&q=75" alt="" style="zoom:33%;" /></th></tr></thead><tbody><tr><td align="center">起初，每个 <code>MyButton</code> 的 <code>count</code> state 均为 <code>0</code></td><td align="center">第一个 <code>MyButton</code> 会将 <code>count</code> 更新为 <code>1</code></td></tr></tbody></table><p>然而，你经常需要组件 <strong>共享数据并一起更新</strong>。</p><p>为了使得 <code>MyButton</code> 组件显示相同的 <code>count</code> 并一起更新，你需要将各个按钮的 state “向上” 移动到最接近包含所有按钮的组件之中。</p><p>在这个示例中，它是 <code>MyApp</code>：</p><table><thead><tr><th align="center"><img src="https://react.docschina.org/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fsharing_data_parent.dark.png&w=828&q=75"  style="zoom:33%;" /></th><th align="center"><img src="https://react.docschina.org/_next/image?url=%2Fimages%2Fdocs%2Fdiagrams%2Fsharing_data_parent_clicked.dark.png&w=828&q=75"  style="zoom:33%;" /></th></tr></thead><tbody><tr><td align="center">起初，<code>MyApp</code> 的 <code>count</code> state 为 <code>0</code> 并传递给了两个子组件</td><td align="center">点击后，<code>MyApp</code> 将 <code>count</code> state 更新为 <code>1</code>，并将其传递给两个子组件</td></tr></tbody></table><p>此刻，当你点击任何一个按钮时，<code>MyApp</code> 中的 <code>count</code> 都将改变，同时会改变 <code>MyButton</code> 中的两个 count。具体代码如下：</p><p>首先，将 <code>MyButton</code> 的 <strong>state 上移到</strong> <code>MyApp</code> 中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br><br>  <span class="hljs-keyword">return</span> (<br><br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update separately<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// ... we&#x27;re moving code from here ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>接着，将 <code>MyApp</code> 中的点击事件处理函数以及 <strong>state 一同向下传递到</strong> 每个 <code>MyButton</code> 中。你可以使用 JSX 的大括号向 <code>MyButton</code> 传递信息。就像之前向 <code>&lt;img&gt;</code> 等内置标签所做的那样:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">MyApp</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">const</span> [count, setCount] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">0</span>);<br>    <br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">handleClick</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">setCount</span>(count + <span class="hljs-number">1</span>);<br>  &#125;<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Counters that update together<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">MyButton</span> <span class="hljs-attr">count</span>=<span class="hljs-string">&#123;count&#125;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;handleClick&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>使用这种方式传递的信息被称作 <strong>prop</strong>。此时 <code>MyApp</code> 组件包含了 <code>count</code> state 以及 <code>handleClick</code> 事件处理函数，并将它们作为 <strong>prop 传递给</strong> 了每个按钮。</p><p>最后，改变 <code>MyButton</code> 以 <strong>读取</strong> 从父组件传递来的 prop：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MyButton</span>(<span class="hljs-params">&#123; count, onClick &#125;</span>) &#123;<br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;onClick&#125;</span>&gt;</span></span><br><span class="language-xml">      Clicked &#123;count&#125; times</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>当你点击按钮时，<code>onClick</code> 处理程序会启动。每个按钮的 <code>onClick</code> prop 会被设置为 <code>MyApp</code> 内的 <code>handleClick</code> 函数，所以函数内的代码会被执行。该代码会调用 <code>setCount(count + 1)</code>，使得 state 变量 <code>count</code> 递增。新的 <code>count</code> 值会被作为 prop 传递给每个按钮，因此它们每次展示的都是最新的值。这被称为“状态提升”。通过向上移动 state，我们实现了在组件间共享它。</p>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Network访问速率</title>
      <link href="/2023/11/30/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84Network%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87/"/>
      <url>/2023/11/30/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84Network%E8%AE%BF%E9%97%AE%E9%80%9F%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/image_2023-11-30-12-18-34.png" alt="image_2023-11-30-12-18-34"></p><h1 id="第一种-Presets方式"><a href="#第一种-Presets方式" class="headerlink" title="第一种:Presets方式"></a>第一种:Presets方式</h1><ul><li>fast 3G</li><li>slow 3G</li><li>offline</li></ul><h1 id="第二种：Custom方式"><a href="#第二种：Custom方式" class="headerlink" title="第二种：Custom方式"></a>第二种：Custom方式</h1><ul><li>打开<code>devTools</code>面板</li><li>按<code>F1</code>打开<code>Settings</code>面板</li><li>点击左侧菜单的<code>Throttling</code>选项</li><li>点击<code>Add custom profile</code>按钮</li><li>添加<code>ProfileName</code>、下载速率、上传速率、<code>Latency延迟时间</code></li><li>按<code>Esc</code></li><li>配置完后，点击<code>Network</code>标签</li><li>在<code>Disable cache</code>后面有一个下拉框，找到<code>Custom</code>下的自定义的选项。</li><li>刷新页面就能实现配置请求速率，可以调试在低速率的情况下应用表现情况</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown配置</title>
      <link href="/2023/11/30/Markdown%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/11/30/Markdown%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="声明区块"><a href="#声明区块" class="headerlink" title="声明区块"></a>声明区块</h1><blockquote><p>第一层</p><blockquote><p>第二层嵌套</p><blockquote><p>第三层嵌套</p></blockquote></blockquote></blockquote><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Hello Markdown&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">[<span class="hljs-string">链接名称</span>](<span class="hljs-link">链接地址</span>)<br>或者<br>&lt;链接地址&gt;<br></code></pre></td></tr></table></figure><h1 id="高级链接"><a href="#高级链接" class="headerlink" title="高级链接"></a>高级链接</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">这个链接用 1 作为网址变量 [<span class="hljs-string">Google</span>][<span class="hljs-symbol">1</span>]<br>这个链接用 Jayhrn 作为网址变量 [<span class="hljs-string">Jayhrn</span>][<span class="hljs-symbol">Jayhrn</span>]<br>然后在文档的结尾为变量赋值（网址）<br><br>[<span class="hljs-symbol">1</span>]: <span class="hljs-link">http://www.google.com/</span><br>[<span class="hljs-symbol">Jayhrn</span>]: <span class="hljs-link">https://blog.jayhrn.com/</span><br></code></pre></td></tr></table></figure><p>这个链接用 1 作为网址变量 <a href="http://www.google.com/">Google</a><br>这个链接用 Jayhrn 作为网址变量 <a href="https://blog.jayhrn.com/">Jayhrn</a><br>然后在文档的结尾为变量赋值（网址）</p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址</span>)<br><br>![<span class="hljs-string">alt 属性文本</span>](<span class="hljs-link">图片地址 &quot;可选标题&quot;</span>)<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://img.jayhrn.com/img/posts/20220727/003.webp&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;25%&quot;</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">| 左对齐 | 右对齐 | 居中对齐 |<br>| :-----| ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中对齐</th></tr></thead><tbody><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr><tr><td align="left">单元格</td><td align="right">单元格</td><td align="center">单元格</td></tr></tbody></table><h1 id="高级Markdown技巧"><a href="#高级Markdown技巧" class="headerlink" title="高级Markdown技巧"></a>高级Markdown技巧</h1><h2 id="html元素"><a href="#html元素" class="headerlink" title="html元素"></a>html元素</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Markdown">使用 <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Ctrl<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Alt<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">kbd</span>&gt;</span></span>Del<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">kbd</span>&gt;</span></span> 重启电脑<br></code></pre></td></tr></table></figure><p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>]]></content>
      
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Chrome浏览器DevTools的快捷键</title>
      <link href="/2023/11/30/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8DevTools%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2023/11/30/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8DevTools%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="left">dev面板功能</th><th>Window</th><th>Mac</th></tr></thead><tbody><tr><td align="left">search全站关键字搜索</td><td>Ctrl+Shift+F</td><td>option+cmd+F</td></tr><tr><td align="left"><code>run command</code>搜索框</td><td>Ctrl+Shift+P</td><td>shift+cmd+P</td></tr><tr><td align="left">打开查找文件搜索框</td><td>Ctrl+F</td><td>cmd+P</td></tr><tr><td align="left">显示或隐藏<code>console</code>标签</td><td>Esc</td><td>Esc</td></tr><tr><td align="left">在文件中搜索</td><td></td><td>cmd+F</td></tr><tr><td align="left">打开<code>console</code>标签</td><td>Ctrl+&#96;</td><td>Ctrl+&#96;</td></tr><tr><td align="left">清除<code>clonsole history</code>和<code>network</code>内容</td><td>Ctrl+L</td><td>Ctrl+L</td></tr><tr><td align="left">复现<code>Element</code>结点上的style</td><td>Ctrl+Alt+C</td><td>option+cmd+C</td></tr><tr><td align="left">重复加载<code>devTools</code></td><td>Alt+R</td><td>option+R</td></tr><tr><td align="left">打开<code>settings</code>面板</td><td>F1</td><td>F1</td></tr><tr><td align="left">隐藏<code>settings</code>标签</td><td>Esc</td><td>Esc</td></tr><tr><td align="left"></td><td></td><td></td></tr><tr><td align="left"></td><td></td><td></td></tr><tr><td align="left"></td><td></td><td></td></tr><tr><td align="left"></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React性能优化方案</title>
      <link href="/2023/11/29/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2023/11/29/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h5 id="思考：分离React组件稳定的部分与变化的部分"><a href="#思考：分离React组件稳定的部分与变化的部分" class="headerlink" title="思考：分离React组件稳定的部分与变化的部分"></a>思考：分离React组件稳定的部分与变化的部分</h5><p>是对父组件操作的.</p><p>变化的部分包含state、props、context。将变化的部分抽离出去形成一个独立的组件</p><h5 id="为什么要进行React组件的性能优化"><a href="#为什么要进行React组件的性能优化" class="headerlink" title="为什么要进行React组件的性能优化"></a>为什么要进行React组件的性能优化</h5><ul><li>为什么React需要性能优化API</li><li>React性能优化应该遵循的法则</li><li>性能优化背后的源码进行机制</li></ul><h5 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h5><p>在Input框只输入内容，会在<code>input content</code>中显示出来，如果子组件是一个比较枆时的组件，那么<code>input content</code>显示时会有卡顿现象。</p><p><img src="/images/react_profiler.png" alt="image-20231129112234121"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p><code>input</code>子组件的改变会在父组件<code>&lt;App/&gt;</code>中更新state,并且会触发父组件中子组件的更新</p><p>解决办法1：</p><p>将<code>input</code>相关的部分提取出来形成单独的新组件，相关的部分也就是变化的部分，提取后<code>&lt;App/&gt;</code>组件就是稳定的部分了。新组件的状态改变只会对新组件内部进行更新。也就是说变化的部分局部化到一个新组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Input</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法2：</p><p>使用<code>React.memo()</code>方法来记忆props有没有改变来判断要不要更新子组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                input content:  &#123;text&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h5><p>这个与<code>举例1</code>相比有一点点区别，就是在外面<code>div</code>中定义了一个<code>title</code>属性。在这种情况下也会造成页面有卡顿的现象。</p><p><img src="/images/react_profiler.png" alt="image-20231129112234121"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>与<code>举例1</code>相同</p><p>解决办法：</p><p>就是把将父组件抽取出来形成一个单独的新组件，把子组件<code>&lt;Child/&gt;</code>作为新组件的属性<code>children</code>传递进去。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">InputWrapper</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- Child组件不会更新，原因是父组件的更新没有给子组件传递prop，对于子组件来说state、prop都没有改变它是不会更新的 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!-- 如果在InputWrapper组件同的&#123;children&#125;改为 &#123;React.cloneElement(children)&#125;后，input每次修改后，Child组件都会更新 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">InputWrapper</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">InputWrapper</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="性能优化方案"><a href="#性能优化方案" class="headerlink" title="性能优化方案"></a>性能优化方案</h5><ul><li><p>抽取变化的部分</p></li><li><p>抽象变化并组合组件</p></li><li><p>函数组件用<code>React.memo()</code></p></li><li><p>类组件使用<code>PureComponent</code>，进行浅比较</p></li><li><p><code>useEffect(function, [dependencies])</code></p></li><li><p>类组件中<code>shouldComponentUpdate(nextProps, nextState)</code>可以进行身比较</p></li><li><p><code>const Home = React.lazy(() =&gt; import(/*webpackChunkName:&quot;Home&quot;*/&quot;../App.jsx&quot;))</code></p><ul><li>注释为了更改加载文件名</li><li><code>&lt;Suspense/&gt;</code>需要与<code>React.lazy()</code>一起使用</li></ul></li><li><p><code>&lt;Fragment&gt;</code> 提升渲染</p></li><li><p>避免使用内联样式属性</p><ul><li>建议使用css文件</li></ul></li><li><p>避免使用内联函数。</p><ul><li><code>&lt;input value=&#123;this.state.value&#125; onChange=&#123;(e)=&gt;this.setState(&#123;value: e.target.value&#125;)&#125;</code></li></ul></li><li><p>在构造函数中进行函数this绑定。</p></li><li><p>在类组件中使用箭头函数</p></li><li><p>优化条件渲染心提升组件性能</p><ul><li><code>true &amp;&amp; &lt;Component/&gt;</code></li></ul></li><li><p>为组件创建错误边界</p><ul><li><p>定义<code>componentDidCatch</code> 、 <code>static getDerivedStateFromError</code></p></li><li><p>如果你定义了 <code>componentDidCatch</code>，那么 React 将在某些子组件（包括后代组件）在渲染过程中抛出错误时调用它。这使得你可以在生产中将该错误记录到错误报告服务中。</p><p>一般来说，它与 <a href="https://zh-hans.react.dev/reference/react/Component#static-getderivedstatefromerror"><code>static getDerivedStateFromError</code></a> 一起使用，这样做允许你更新 state 来响应错误并向用户显示错误消息。具有这些方法的组件称为 <strong>错误边界</strong>。</p></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React内置的组件</title>
      <link href="/2023/11/29/React-built-in-components/"/>
      <url>/2023/11/29/React-built-in-components/</url>
      
        <content type="html"><![CDATA[<h4 id="通常使用-代替，它们都允许你在不添加额外节点的情况下将子元素组合。"><a href="#通常使用-代替，它们都允许你在不添加额外节点的情况下将子元素组合。" class="headerlink" title="&lt;Fragment&gt; 通常使用 &lt;&gt;...&lt;/&gt; 代替，它们都允许你在不添加额外节点的情况下将子元素组合。"></a><code>&lt;Fragment&gt;</code> 通常使用 <code>&lt;&gt;...&lt;/&gt;</code> 代替，它们都允许你在不添加额外节点的情况下将子元素组合。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OneChild</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AnotherChild</span> /&gt;</span></span><br>&lt;/&gt;<br></code></pre></td></tr></table></figure><h4 id="帮助你在开发过程中尽早地发现组件中的常见错误。"><a href="#帮助你在开发过程中尽早地发现组件中的常见错误。" class="headerlink" title="&lt;StrictMode&gt; 帮助你在开发过程中尽早地发现组件中的常见错误。"></a><code>&lt;StrictMode&gt;</code> 帮助你在开发过程中尽早地发现组件中的常见错误。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StrictMode</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">StrictMode</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="允许在子组件完成加载前展示后备方案。"><a href="#允许在子组件完成加载前展示后备方案。" class="headerlink" title="&lt;Suspense&gt; 允许在子组件完成加载前展示后备方案。"></a><code>&lt;Suspense&gt;</code> 允许在子组件完成加载前展示后备方案。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> /&gt;</span></span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SomeComponent</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="允许你编程式测量-React-树的渲染性能。"><a href="#允许你编程式测量-React-树的渲染性能。" class="headerlink" title="&lt;Profiler&gt; 允许你编程式测量 React 树的渲染性能。"></a><code>&lt;Profiler&gt;</code> 允许你编程式测量 React 树的渲染性能。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onRender</span>(<span class="hljs-params">id, phase, actualDuration, baseDuration, startTime, commitTime</span>) &#123;<br>  <span class="hljs-comment">// 对渲染时间进行汇总或记录...</span><br>&#125;<br><br>&lt;<span class="hljs-title class_">Profiler</span> id=<span class="hljs-string">&quot;App&quot;</span> onRender=&#123;onRender&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Profiler</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><code>id</code>：字符串，为 <code>&lt;Profiler&gt;</code> 树的 <code>id</code> 属性，用于标识刚刚提交的部分。如果使用多个 profiler，可以通过此属性识别提交的是树中的哪一部分。</li><li><code>phase</code>：为 <code>&quot;mount&quot;</code>、<code>&quot;update&quot;</code> 或 <code>&quot;nested-update&quot;</code> 中之一。这可以让你知道组件树是首次挂载还是由于 props、state 或 hook 的更改而重新渲染。</li><li><code>actualDuration</code>：在此次更新中，渲染 <code>&lt;Profiler&gt;</code> 组件树的毫秒数。这可以显示子树在使用记忆化（例如 <a href="https://react.docschina.org/reference/react/memo"><code>memo</code></a> 和 <a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a>）后的效果如何。理想情况下，此值在挂载后应显著减少，因为许多后代组件只会在特定的 props 变化时重新渲染。</li><li><code>baseDuration</code>：估算在没有任何优化的情况下重新渲染整棵 <code>&lt;Profiler&gt;</code> 子树所需的毫秒数。它通过累加树中每个组件的最近一次渲染持续时间来计算。此值估计了渲染的最差情况成本（例如初始挂载或没有使用记忆化的树）。将其与 <code>actualDuration</code> 进行比较，以确定记忆化是否起作用。</li><li><code>startTime</code>：当 React 开始渲染此次更新时的时间戳。</li><li><code>commitTime</code>：当 React 提交此次更新时的时间戳。此值在提交的所有 profiler 中共享，如果需要，可以对它们进行分组。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hook</title>
      <link href="/2023/11/27/hook/"/>
      <url>/2023/11/27/hook/</url>
      
        <content type="html"><![CDATA[<p>useEffect 是一个 React Hook，它允许你 将组件与外部系统同步。</p><p><code>useDeferredValue</code> 是一个 React Hook，可以让你延迟更新 UI 的某些部分。</p><p><code>useImperativeHandle</code> 是 React 中的一个 Hook，它能让你自定义由 <a href="https://react.docschina.org/learn/manipulating-the-dom-with-refs">ref</a> 暴露出来的句柄。</p><p><code>memo</code> 允许你的组件在 props 没有改变的情况下跳过重新渲染。</p><p><code>useInsertionEffect</code> 可以在布局副作用触发之前将元素插入到 DOM 中。</p><p><code>useLayoutEffect</code> 是 <a href="https://react.docschina.org/reference/react/useEffect"><code>useEffect</code></a> 的一个版本，在浏览器重新绘制屏幕之前触发。</p><p>在组件的顶层作用域调用 <code>useReducer</code> 以创建一个用于管理状态的 <a href="https://react.docschina.org/learn/extracting-state-logic-into-a-reducer">reducer</a>。</p><p><code>useRef</code> 是一个 React Hook，它能帮助引用一个不需要渲染的值。</p><p><code>useState</code> 是一个 React Hook，它允许你向组件添加一个 <a href="https://react.docschina.org/learn/state-a-components-memory">状态变量</a>。</p><p><code>useSyncExternalStore</code> 是一个让你订阅外部 store 的 React Hook。</p><p><code>useTransition</code> 是一个帮助你在不阻塞 UI 的情况下更新状态的 React Hook。</p><p><code>useCallback</code> 是一个允许你在多次渲染中缓存函数的 React Hook。</p><p><code>useContext</code> 是一个 React Hook，可以让你读取和订阅组件中的 <a href="https://react.docschina.org/learn/passing-data-deeply-with-context">context</a>。</p><p><code>useDebugValue</code> 是一个 React Hook，可以让你在 <a href="https://react.docschina.org/learn/react-developer-tools">React 开发工具</a> 中为自定义 Hook 添加标签。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/27/picgo/"/>
      <url>/2023/11/27/picgo/</url>
      
        <content type="html"><![CDATA[<p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_11_06.png" alt="image-20231127141005229"></p><p>时间轴  </p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/27/hello-world/"/>
      <url>/2023/11/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>title【必需】页面标题<br>date【必需】页面创建日期<br>type【必需】标签、分类和友情链接三个页面需要配置<br>updated【可选】页面更新日期<br>description【可选】页面描述<br>keywords【可选】页面关键字<br>comments【可选】显示页面评论模块 (默认 true)<br>top_img【可选】页面顶部图片<br>mathjax【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)<br>aside【可选】显示侧边栏 (默认 true)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开 (true&#x2F;false) (默认为设置中highlight_shrink的配置)<br>random【可选】配置友情链接是否随机排序（默认为 false)</p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_12_36.jpg"></p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_14_42.png"><img src="/" alt="img"></p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_15_11_41.jpg" alt="Hello World"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><img src="/images/image_2023-11-23-14-56-03.png" alt="image_2023-11-23-14-56-03"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">WindowSizeContext</span>, &#123; getDefaultCreateContextValue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./WindowSizeContext&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WindowSizeProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-title function_">getDefaultCreateContextValue</span>())<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">resizeFn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">setValue</span>(<span class="hljs-title function_">getDefaultCreateContextValue</span>())<br>        &#125;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeFn)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeFn)<br>        &#125;<br>    &#125;, [value.<span class="hljs-property">screenWidth</span>, value.<span class="hljs-property">screenHeight</span>]);<br><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowSizeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">WindowSizeContext.Provider</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WindowSizeConsumer</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowSizeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">            (&#123; screenWidth, screenHeight &#125;) =&gt; &#123;</span><br><span class="language-xml">                return React.Children.map(children, (children) =&gt; &#123;</span><br><span class="language-xml">                    return React.cloneElement(children, &#123; screenWidth, screenHeight &#125;)</span><br><span class="language-xml">                &#125;)</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">WindowSizeContext.Consumer</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>    <span class="hljs-title class_">WindowSizeProvider</span>,<br>    <span class="hljs-title class_">WindowSizeConsumer</span>,<br>&#125;<br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">WindowSizeContext</span><br></code></pre></td></tr></table></figure><p>相册<br><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A</a></p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>按钮样式：<a href="https://butterfly.js.org/posts/4aa8abbe/#Button">https://butterfly.js.org/posts/4aa8abbe/#Button</a></p><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><p>时间轴  </p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>userEffect</title>
      <link href="/2023/11/25/userEffect/"/>
      <url>/2023/11/25/userEffect/</url>
      
        <content type="html"><![CDATA[<p><code>useEffect</code> 是一个 React Hook，它允许你 <a href="https://react.docschina.org/learn/synchronizing-with-effects">将组件与外部系统同步</a>。</p><blockquote><p>有些组件需要与网络、某些浏览器 API 或第三方库保持连接，当它们显示在页面上时。这些系统不受 React 控制，所以称为外部系统。</p><p>useEffect相当于是函数组件与外部系统进行通信交流的一个API接口，组件内部与外部系统进行交互都是通过useEffect来完成的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(setup, dependencies?<span class="hljs-comment">/* 依赖项列表 */</span>)<br><span class="hljs-comment">// 当组件被添加到 DOM 的时候，React 将运行 setup 函数。</span><br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>useEffect</code> 是一个 Hook，因此只能在 <strong>组件的顶层</strong> 或自己的 Hook 中调用它，而不能在循环或者条件内部调用。如果需要，抽离出一个新组件并将 state 移入其中。</li><li>如果你 <strong>没有打算与某个外部系统同步</strong>，<a href="https://react.docschina.org/learn/you-might-not-need-an-effect">那么你可能不需要 Effect</a>。</li><li>当严格模式启动时，React 将在真正的 setup 函数首次运行前，<strong>运行一个开发模式下专有的额外 setup + cleanup 周期</strong>。这是一个压力测试，用于确保 cleanup 逻辑“映射”到了 setup 逻辑，并停止或撤消 setup 函数正在做的任何事情。如果这会导致一些问题，<a href="https://react.docschina.org/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">请实现 cleanup 函数</a>。</li><li>如果你的一些依赖项是组件内部定义的对象或函数，则存在这样的风险，即它们将 <strong>导致 Effect 过多地重新运行</strong>。要解决这个问题，请删除不必要的 <a href="https://react.docschina.org/reference/react/useEffect#removing-unnecessary-object-dependencies">对象</a> 和 <a href="https://react.docschina.org/reference/react/useEffect#removing-unnecessary-function-dependencies">函数</a> 依赖项。你还可以 <a href="https://react.docschina.org/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect">抽离状态更新</a> 和 <a href="https://react.docschina.org/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect">非响应式的逻辑</a> 到 Effect 之外。</li><li>如果你的 Effect 不是由交互（比如点击）引起的，那么 React 会让浏览器 <strong>在运行 Effect 前先绘制出更新后的屏幕</strong>。如果你的 Effect 正在做一些视觉相关的事情（例如，定位一个 tooltip），并且有显著的延迟（例如，它会闪烁），那么将 <code>useEffect</code> 替换为 <a href="https://react.docschina.org/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a>。</li><li>即使你的 Effect 是由一个交互（比如点击）引起的，<strong>浏览器也可能在处理 Effect 内部的状态更新之前重新绘制屏幕</strong>。通常，这就是你想要的。但是，如果你一定要阻止浏览器重新绘制屏幕，则需要用 <a href="https://react.docschina.org/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a> 替换 <code>useEffect</code>。</li><li>Effect <strong>只在客户端上运行</strong>，在服务端渲染中不会运行。</li></ul><h1 id="useEffect适用"><a href="#useEffect适用" class="headerlink" title="useEffect适用"></a>useEffect适用</h1><ul><li><p>函数组件内部与外部系统进行交流的接口</p><ul><li>当组件的props或state改变后，就会调用useEffect()</li><li>外部系统状态改变时通过定义在useEffect()中的监听来改变函数组件的状态或props<ul><li>window.addEventLiestener(“resize”, fun)</li><li>localStorage</li></ul></li></ul></li><li><p>每个 Effect 表示一个独立的同步过程。 </p><ul><li>一个useEffect()应该只做一件事，useEffect中的逻辑应该是共同重用的。</li></ul></li><li><p>请求数据</p></li><li><p>指定响应式依赖项 </p><ul><li>响应式值包括 props 和直接在组件内声明的所有变量和函数<ul><li>在 Effect 中读取响应式值时，必须将其添加为依赖项。<ul><li>原因：这样可以确保你的 Effect 对该值的每次更改都“作出响应”</li></ul></li><li><code>React Hook useEffect has a missing dependency: &#39;roomId&#39;. Either include it or remove the dependency array.</code></li></ul></li><li>依赖项为空数组的 Effect 不会在组件任何的 props 或 state 发生改变时重新运行</li></ul></li><li><p>在 Effect 中根据先前 state 更新 state</p></li><li><p>删除不必要的对象依赖项</p><ul><li>避免使用渲染期间创建的对象作为依赖项。相反，在 Effect 内部创建对象</li></ul></li><li><p>删除不必要的函数依赖项</p><ul><li>避免使用在渲染期间创建的函数作为依赖项，请在 Effect 内部声明它</li></ul></li><li><p>从 Effect 读取最新的 props 和 state</p><ul><li>有时你想要从 Effect 中获取 最新的 props 和 state，而不“响应”它们。<ul><li><code>useEffectEvent</code>使用它</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useMemo与useCallback区别</title>
      <link href="/2023/11/24/useMemo-useCallback-diff/"/>
      <url>/2023/11/24/useMemo-useCallback-diff/</url>
      
        <content type="html"><![CDATA[<p><a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a> 经常与 <code>useCallback</code> 一同出现。当尝试优化子组件时，它们都很有用。他们会 <a href="https://en.wikipedia.org/wiki/Memoization">记住</a>（或者说，缓存）正在传递的东西：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useMemo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> product = <span class="hljs-title function_">useData</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId);<br><br>  <span class="hljs-keyword">const</span> requirements = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//调用函数并缓存结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">computeRequirements</span>(product);<br>  &#125;, [product]);<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123; <span class="hljs-comment">// 缓存函数本身</span><br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">requirements</span>=<span class="hljs-string">&#123;requirements&#125;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>区别在于你需要缓存 <strong>什么</strong>:</p><ul><li><strong><a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a> 缓存函数调用的结果</strong>。在这里，它缓存了调用 <code>computeRequirements(product)</code> 的结果。除非 <code>product</code> 发生改变，否则它将不会发生变化。这让你向下传递 <code>requirements</code> 时而无需不必要地重新渲染 <code>ShippingForm</code>。必要时，React 将会调用传入的函数重新计算结果。<ul><li>缓存函数调用的结果，结果可以是基本类型、引用类型(对象或函数)</li></ul></li><li><strong><code>useCallback</code> 缓存函数本身</strong>。不像 <code>useMemo</code>，它不会调用你传入的函数。相反，它缓存此函数。从而除非 <code>productId</code> 或 <code>referrer</code> 发生改变，<code>handleSubmit</code> 自己将不会发生改变。这让你向下传递 <code>handleSubmit</code> 函数而无需不必要地重新渲染 <code>ShippingForm</code>。直至用户提交表单，你的代码都将不会运行。</li></ul><p>如果你已经熟悉了 <a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a>，你可能发现将 <code>useCallback</code> 视为以下内容会很有帮助：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在 React 内部的简化实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useCallback</span>(<span class="hljs-params">fn, dependencies</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> fn, dependencies);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 相当于useCallback()</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>        referrer,<br>        orderDetails<br>      &#125;);<br>    &#125;;<br>  &#125;, [productId, referrer]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
