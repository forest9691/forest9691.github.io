<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>React性能优化方案</title>
      <link href="/2023/11/29/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/"/>
      <url>/2023/11/29/React%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h5 id="思考：分离React组件稳定的部分与变化的部分"><a href="#思考：分离React组件稳定的部分与变化的部分" class="headerlink" title="思考：分离React组件稳定的部分与变化的部分"></a>思考：分离React组件稳定的部分与变化的部分</h5><p>是对父组件操作的.</p><p>变化的部分包含state、props、context。将变化的部分抽离出去形成一个独立的组件</p><h5 id="为什么要进行React组件的性能优化"><a href="#为什么要进行React组件的性能优化" class="headerlink" title="为什么要进行React组件的性能优化"></a>为什么要进行React组件的性能优化</h5><ul><li>为什么React需要性能优化API</li><li>React性能优化应该遵循的法则</li><li>性能优化背后的源码进行机制</li></ul><h5 id="举例1"><a href="#举例1" class="headerlink" title="举例1"></a>举例1</h5><p>在Input框只输入内容，会在<code>input content</code>中显示出来，如果子组件是一个比较枆时的组件，那么<code>input content</code>显示时会有卡顿现象。</p><p><img src="/images/react_profiler.png" alt="image-20231129112234121"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot;&#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p><code>input</code>子组件的改变会在父组件<code>&lt;App/&gt;</code>中更新state,并且会触发父组件中子组件的更新</p><p>解决办法1：</p><p>将<code>input</code>相关的部分提取出来形成单独的新组件，相关的部分也就是变化的部分，提取后<code>&lt;App/&gt;</code>组件就是稳定的部分了。新组件的状态改变只会对新组件内部进行更新。也就是说变化的部分局部化到一个新组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Input</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>解决办法2：</p><p>使用<code>React.memo()</code>方法来记忆props有没有改变来判断要不要更新子组件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">memo</span>(<span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                input content:  &#123;text&#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="举例2"><a href="#举例2" class="headerlink" title="举例2"></a>举例2</h5><p>这个与<code>举例1</code>相比有一点点区别，就是在外面<code>div</code>中定义了一个<code>title</code>属性。在这种情况下也会造成页面有卡顿的现象。</p><p><img src="/images/react_profiler.png" alt="image-20231129112234121"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure><p>原因：</p><p>与<code>举例1</code>相同</p><p>解决办法：</p><p>就是把将父组件抽取出来形成一个单独的新组件，把子组件<code>&lt;Child/&gt;</code>作为新组件的属性<code>children</code>传递进去。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">InputWrapper</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-comment">&lt;!-- Child组件不会更新，原因是父组件的更新没有给子组件传递prop，对于子组件来说state、prop都没有改变它是不会更新的 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-comment">&lt;!-- 如果在InputWrapper组件同的&#123;children&#125;改为 &#123;React.cloneElement(children)&#125;后，input每次修改后，Child组件都会更新 --&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">InputWrapper</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">InputWrapper</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>    <span class="hljs-keyword">const</span> [text, setInput] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">padding</span>: <span class="hljs-string">&quot;20px&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid blue&quot;</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#123;text&#125;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">width:</span> <span class="hljs-attr">300</span>, <span class="hljs-attr">margin:</span> <span class="hljs-attr">50</span>, <span class="hljs-attr">padding:</span> <span class="hljs-attr">10</span>, <span class="hljs-attr">border:</span> &quot;<span class="hljs-attr">1px</span> <span class="hljs-attr">solid</span> #<span class="hljs-attr">ccc</span>&quot; &#125;&#125;&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;(e)</span> =&gt;</span> setInput(e.target.value)&#125; /&gt;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            input content:  &#123;text&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> now = performance.<span class="hljs-title function_">now</span>();<br>    <span class="hljs-keyword">while</span> (performance.<span class="hljs-title function_">now</span>() - now &lt; <span class="hljs-number">300</span>) &#123; &#125;<br><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Child Component visiable&quot;</span>)<br>    <span class="hljs-keyword">const</span> style = &#123;<br>        <span class="hljs-attr">margin</span>: <span class="hljs-string">&quot;20px 0 0&quot;</span>,<br>        <span class="hljs-attr">border</span>: <span class="hljs-string">&quot;1px solid #ccc&quot;</span>,<br>        <span class="hljs-attr">padding</span>: <span class="hljs-number">5</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#123;style&#125;</span>&gt;</span></span><br><span class="language-xml">            这是一个子组件模块</span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React内置的组件</title>
      <link href="/2023/11/29/React-built-in-components/"/>
      <url>/2023/11/29/React-built-in-components/</url>
      
        <content type="html"><![CDATA[<h4 id="通常使用-代替，它们都允许你在不添加额外节点的情况下将子元素组合。"><a href="#通常使用-代替，它们都允许你在不添加额外节点的情况下将子元素组合。" class="headerlink" title="&lt;Fragment&gt; 通常使用 &lt;&gt;...&lt;/&gt; 代替，它们都允许你在不添加额外节点的情况下将子元素组合。"></a><code>&lt;Fragment&gt;</code> 通常使用 <code>&lt;&gt;...&lt;/&gt;</code> 代替，它们都允许你在不添加额外节点的情况下将子元素组合。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">OneChild</span> /&gt;</span></span><br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">AnotherChild</span> /&gt;</span></span><br>&lt;/&gt;<br></code></pre></td></tr></table></figure><h4 id="帮助你在开发过程中尽早地发现组件中的常见错误。"><a href="#帮助你在开发过程中尽早地发现组件中的常见错误。" class="headerlink" title="&lt;StrictMode&gt; 帮助你在开发过程中尽早地发现组件中的常见错误。"></a><code>&lt;StrictMode&gt;</code> 帮助你在开发过程中尽早地发现组件中的常见错误。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">StrictMode</span>&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">StrictMode</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="允许在子组件完成加载前展示后备方案。"><a href="#允许在子组件完成加载前展示后备方案。" class="headerlink" title="&lt;Suspense&gt; 允许在子组件完成加载前展示后备方案。"></a><code>&lt;Suspense&gt;</code> 允许在子组件完成加载前展示后备方案。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;<span class="hljs-title class_">Suspense</span> fallback=&#123;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> /&gt;</span></span>&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">SomeComponent</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Suspense</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="允许你编程式测量-React-树的渲染性能。"><a href="#允许你编程式测量-React-树的渲染性能。" class="headerlink" title="&lt;Profiler&gt; 允许你编程式测量 React 树的渲染性能。"></a><code>&lt;Profiler&gt;</code> 允许你编程式测量 React 树的渲染性能。</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">function</span> <span class="hljs-title function_">onRender</span>(<span class="hljs-params">id, phase, actualDuration, baseDuration, startTime, commitTime</span>) &#123;<br>  <span class="hljs-comment">// 对渲染时间进行汇总或记录...</span><br>&#125;<br><br>&lt;<span class="hljs-title class_">Profiler</span> id=<span class="hljs-string">&quot;App&quot;</span> onRender=&#123;onRender&#125;&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">App</span> /&gt;</span></span><br>&lt;/<span class="hljs-title class_">Profiler</span>&gt;<br></code></pre></td></tr></table></figure><ul><li><code>id</code>：字符串，为 <code>&lt;Profiler&gt;</code> 树的 <code>id</code> 属性，用于标识刚刚提交的部分。如果使用多个 profiler，可以通过此属性识别提交的是树中的哪一部分。</li><li><code>phase</code>：为 <code>&quot;mount&quot;</code>、<code>&quot;update&quot;</code> 或 <code>&quot;nested-update&quot;</code> 中之一。这可以让你知道组件树是首次挂载还是由于 props、state 或 hook 的更改而重新渲染。</li><li><code>actualDuration</code>：在此次更新中，渲染 <code>&lt;Profiler&gt;</code> 组件树的毫秒数。这可以显示子树在使用记忆化（例如 <a href="https://react.docschina.org/reference/react/memo"><code>memo</code></a> 和 <a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a>）后的效果如何。理想情况下，此值在挂载后应显著减少，因为许多后代组件只会在特定的 props 变化时重新渲染。</li><li><code>baseDuration</code>：估算在没有任何优化的情况下重新渲染整棵 <code>&lt;Profiler&gt;</code> 子树所需的毫秒数。它通过累加树中每个组件的最近一次渲染持续时间来计算。此值估计了渲染的最差情况成本（例如初始挂载或没有使用记忆化的树）。将其与 <code>actualDuration</code> 进行比较，以确定记忆化是否起作用。</li><li><code>startTime</code>：当 React 开始渲染此次更新时的时间戳。</li><li><code>commitTime</code>：当 React 提交此次更新时的时间戳。此值在提交的所有 profiler 中共享，如果需要，可以对它们进行分组。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hook</title>
      <link href="/2023/11/27/hook/"/>
      <url>/2023/11/27/hook/</url>
      
        <content type="html"><![CDATA[<p>useEffect 是一个 React Hook，它允许你 将组件与外部系统同步。</p><p><code>useDeferredValue</code> 是一个 React Hook，可以让你延迟更新 UI 的某些部分。</p><p><code>useImperativeHandle</code> 是 React 中的一个 Hook，它能让你自定义由 <a href="https://react.docschina.org/learn/manipulating-the-dom-with-refs">ref</a> 暴露出来的句柄。</p><p><code>memo</code> 允许你的组件在 props 没有改变的情况下跳过重新渲染。</p><p><code>useInsertionEffect</code> 可以在布局副作用触发之前将元素插入到 DOM 中。</p><p><code>useLayoutEffect</code> 是 <a href="https://react.docschina.org/reference/react/useEffect"><code>useEffect</code></a> 的一个版本，在浏览器重新绘制屏幕之前触发。</p><p>在组件的顶层作用域调用 <code>useReducer</code> 以创建一个用于管理状态的 <a href="https://react.docschina.org/learn/extracting-state-logic-into-a-reducer">reducer</a>。</p><p><code>useRef</code> 是一个 React Hook，它能帮助引用一个不需要渲染的值。</p><p><code>useState</code> 是一个 React Hook，它允许你向组件添加一个 <a href="https://react.docschina.org/learn/state-a-components-memory">状态变量</a>。</p><p><code>useSyncExternalStore</code> 是一个让你订阅外部 store 的 React Hook。</p><p><code>useTransition</code> 是一个帮助你在不阻塞 UI 的情况下更新状态的 React Hook。</p><p><code>useCallback</code> 是一个允许你在多次渲染中缓存函数的 React Hook。</p><p><code>useContext</code> 是一个 React Hook，可以让你读取和订阅组件中的 <a href="https://react.docschina.org/learn/passing-data-deeply-with-context">context</a>。</p><p><code>useDebugValue</code> 是一个 React Hook，可以让你在 <a href="https://react.docschina.org/learn/react-developer-tools">React 开发工具</a> 中为自定义 Hook 添加标签。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/27/picgo/"/>
      <url>/2023/11/27/picgo/</url>
      
        <content type="html"><![CDATA[<p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_11_06.png" alt="image-20231127141005229"></p><p>时间轴  </p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/27/hello-world/"/>
      <url>/2023/11/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>title【必需】页面标题<br>date【必需】页面创建日期<br>type【必需】标签、分类和友情链接三个页面需要配置<br>updated【可选】页面更新日期<br>description【可选】页面描述<br>keywords【可选】页面关键字<br>comments【可选】显示页面评论模块 (默认 true)<br>top_img【可选】页面顶部图片<br>mathjax【可选】显示mathjax (当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex (当设置katex的per_page: false时，才需要配置，默认 false)<br>aside【可选】显示侧边栏 (默认 true)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开 (true&#x2F;false) (默认为设置中highlight_shrink的配置)<br>random【可选】配置友情链接是否随机排序（默认为 false)</p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_12_36.jpg"></p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_14_14_42.png"><img src="/" alt="img"></p><p><img src="http://s4rpah4on.hd-bkt.clouddn.com/blog/images/img_2023_11_27_15_11_41.jpg" alt="Hello World"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><img src="/images/image_2023-11-23-14-56-03.png" alt="image_2023-11-23-14-56-03"></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs tsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">WindowSizeContext</span>, &#123; getDefaultCreateContextValue &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./WindowSizeContext&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WindowSizeProvider</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-title function_">getDefaultCreateContextValue</span>())<br><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">resizeFn</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">setValue</span>(<span class="hljs-title function_">getDefaultCreateContextValue</span>())<br>        &#125;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeFn)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;resize&#x27;</span>, resizeFn)<br>        &#125;<br>    &#125;, [value.<span class="hljs-property">screenWidth</span>, value.<span class="hljs-property">screenHeight</span>]);<br><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowSizeContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span>&gt;</span></span><br><span class="language-xml">        &#123;children&#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">WindowSizeContext.Provider</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">WindowSizeConsumer</span>(<span class="hljs-params">&#123; children &#125;</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">WindowSizeContext.Consumer</span>&gt;</span></span><br><span class="language-xml">        &#123;</span><br><span class="language-xml">            (&#123; screenWidth, screenHeight &#125;) =&gt; &#123;</span><br><span class="language-xml">                return React.Children.map(children, (children) =&gt; &#123;</span><br><span class="language-xml">                    return React.cloneElement(children, &#123; screenWidth, screenHeight &#125;)</span><br><span class="language-xml">                &#125;)</span><br><span class="language-xml">            &#125;</span><br><span class="language-xml">        &#125;</span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">WindowSizeContext.Consumer</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-keyword">export</span> &#123;<br>    <span class="hljs-title class_">WindowSizeProvider</span>,<br>    <span class="hljs-title class_">WindowSizeConsumer</span>,<br>&#125;<br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">WindowSizeContext</span><br></code></pre></td></tr></table></figure><p>相册<br><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A">https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A</a></p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><div class="tabs" id="test1"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test1-1">test1 1</button><button type="button" class="tab " data-href="test1-2">test1 2</button><button type="button" class="tab " data-href="test1-3">test1 3</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><p>按钮样式：<a href="https://butterfly.js.org/posts/4aa8abbe/#Button">https://butterfly.js.org/posts/4aa8abbe/#Button</a></p><a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><p>时间轴  </p><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>userEffect</title>
      <link href="/2023/11/25/userEffect/"/>
      <url>/2023/11/25/userEffect/</url>
      
        <content type="html"><![CDATA[<p><code>useEffect</code> 是一个 React Hook，它允许你 <a href="https://react.docschina.org/learn/synchronizing-with-effects">将组件与外部系统同步</a>。</p><blockquote><p>有些组件需要与网络、某些浏览器 API 或第三方库保持连接，当它们显示在页面上时。这些系统不受 React 控制，所以称为外部系统。</p><p>useEffect相当于是函数组件与外部系统进行通信交流的一个API接口，组件内部与外部系统进行交互都是通过useEffect来完成的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">useEffect</span>(setup, dependencies?<span class="hljs-comment">/* 依赖项列表 */</span>)<br><span class="hljs-comment">// 当组件被添加到 DOM 的时候，React 将运行 setup 函数。</span><br></code></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li><code>useEffect</code> 是一个 Hook，因此只能在 <strong>组件的顶层</strong> 或自己的 Hook 中调用它，而不能在循环或者条件内部调用。如果需要，抽离出一个新组件并将 state 移入其中。</li><li>如果你 <strong>没有打算与某个外部系统同步</strong>，<a href="https://react.docschina.org/learn/you-might-not-need-an-effect">那么你可能不需要 Effect</a>。</li><li>当严格模式启动时，React 将在真正的 setup 函数首次运行前，<strong>运行一个开发模式下专有的额外 setup + cleanup 周期</strong>。这是一个压力测试，用于确保 cleanup 逻辑“映射”到了 setup 逻辑，并停止或撤消 setup 函数正在做的任何事情。如果这会导致一些问题，<a href="https://react.docschina.org/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development">请实现 cleanup 函数</a>。</li><li>如果你的一些依赖项是组件内部定义的对象或函数，则存在这样的风险，即它们将 <strong>导致 Effect 过多地重新运行</strong>。要解决这个问题，请删除不必要的 <a href="https://react.docschina.org/reference/react/useEffect#removing-unnecessary-object-dependencies">对象</a> 和 <a href="https://react.docschina.org/reference/react/useEffect#removing-unnecessary-function-dependencies">函数</a> 依赖项。你还可以 <a href="https://react.docschina.org/reference/react/useEffect#updating-state-based-on-previous-state-from-an-effect">抽离状态更新</a> 和 <a href="https://react.docschina.org/reference/react/useEffect#reading-the-latest-props-and-state-from-an-effect">非响应式的逻辑</a> 到 Effect 之外。</li><li>如果你的 Effect 不是由交互（比如点击）引起的，那么 React 会让浏览器 <strong>在运行 Effect 前先绘制出更新后的屏幕</strong>。如果你的 Effect 正在做一些视觉相关的事情（例如，定位一个 tooltip），并且有显著的延迟（例如，它会闪烁），那么将 <code>useEffect</code> 替换为 <a href="https://react.docschina.org/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a>。</li><li>即使你的 Effect 是由一个交互（比如点击）引起的，<strong>浏览器也可能在处理 Effect 内部的状态更新之前重新绘制屏幕</strong>。通常，这就是你想要的。但是，如果你一定要阻止浏览器重新绘制屏幕，则需要用 <a href="https://react.docschina.org/reference/react/useLayoutEffect"><code>useLayoutEffect</code></a> 替换 <code>useEffect</code>。</li><li>Effect <strong>只在客户端上运行</strong>，在服务端渲染中不会运行。</li></ul><h1 id="useEffect适用"><a href="#useEffect适用" class="headerlink" title="useEffect适用"></a>useEffect适用</h1><ul><li><p>函数组件内部与外部系统进行交流的接口</p><ul><li>当组件的props或state改变后，就会调用useEffect()</li><li>外部系统状态改变时通过定义在useEffect()中的监听来改变函数组件的状态或props<ul><li>window.addEventLiestener(“resize”, fun)</li><li>localStorage</li></ul></li></ul></li><li><p>每个 Effect 表示一个独立的同步过程。 </p><ul><li>一个useEffect()应该只做一件事，useEffect中的逻辑应该是共同重用的。</li></ul></li><li><p>请求数据</p></li><li><p>指定响应式依赖项 </p><ul><li>响应式值包括 props 和直接在组件内声明的所有变量和函数<ul><li>在 Effect 中读取响应式值时，必须将其添加为依赖项。<ul><li>原因：这样可以确保你的 Effect 对该值的每次更改都“作出响应”</li></ul></li><li><code>React Hook useEffect has a missing dependency: &#39;roomId&#39;. Either include it or remove the dependency array.</code></li></ul></li><li>依赖项为空数组的 Effect 不会在组件任何的 props 或 state 发生改变时重新运行</li></ul></li><li><p>在 Effect 中根据先前 state 更新 state</p></li><li><p>删除不必要的对象依赖项</p><ul><li>避免使用渲染期间创建的对象作为依赖项。相反，在 Effect 内部创建对象</li></ul></li><li><p>删除不必要的函数依赖项</p><ul><li>避免使用在渲染期间创建的函数作为依赖项，请在 Effect 内部声明它</li></ul></li><li><p>从 Effect 读取最新的 props 和 state</p><ul><li>有时你想要从 Effect 中获取 最新的 props 和 state，而不“响应”它们。<ul><li><code>useEffectEvent</code>使用它</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>useMemo与useCallback区别</title>
      <link href="/2023/11/24/useMemo-useCallback-diff/"/>
      <url>/2023/11/24/useMemo-useCallback-diff/</url>
      
        <content type="html"><![CDATA[<p><a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a> 经常与 <code>useCallback</code> 一同出现。当尝试优化子组件时，它们都很有用。他们会 <a href="https://en.wikipedia.org/wiki/Memoization">记住</a>（或者说，缓存）正在传递的东西：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; useMemo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ProductPage</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> product = <span class="hljs-title function_">useData</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId);<br><br>  <span class="hljs-keyword">const</span> requirements = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123; <span class="hljs-comment">//调用函数并缓存结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">computeRequirements</span>(product);<br>  &#125;, [product]);<br><br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123; <span class="hljs-comment">// 缓存函数本身</span><br>    <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>      referrer,<br>      orderDetails,<br>    &#125;);<br>  &#125;, [productId, referrer]);<br><br>  <span class="hljs-keyword">return</span> (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&#123;theme&#125;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ShippingForm</span> <span class="hljs-attr">requirements</span>=<span class="hljs-string">&#123;requirements&#125;</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>区别在于你需要缓存 <strong>什么</strong>:</p><ul><li><strong><a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a> 缓存函数调用的结果</strong>。在这里，它缓存了调用 <code>computeRequirements(product)</code> 的结果。除非 <code>product</code> 发生改变，否则它将不会发生变化。这让你向下传递 <code>requirements</code> 时而无需不必要地重新渲染 <code>ShippingForm</code>。必要时，React 将会调用传入的函数重新计算结果。<ul><li>缓存函数调用的结果，结果可以是基本类型、引用类型(对象或函数)</li></ul></li><li><strong><code>useCallback</code> 缓存函数本身</strong>。不像 <code>useMemo</code>，它不会调用你传入的函数。相反，它缓存此函数。从而除非 <code>productId</code> 或 <code>referrer</code> 发生改变，<code>handleSubmit</code> 自己将不会发生改变。这让你向下传递 <code>handleSubmit</code> 函数而无需不必要地重新渲染 <code>ShippingForm</code>。直至用户提交表单，你的代码都将不会运行。</li></ul><p>如果你已经熟悉了 <a href="https://react.docschina.org/reference/react/useMemo"><code>useMemo</code></a>，你可能发现将 <code>useCallback</code> 视为以下内容会很有帮助：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在 React 内部的简化实现</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">useCallback</span>(<span class="hljs-params">fn, dependencies</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> fn, dependencies);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Page</span>(<span class="hljs-params">&#123; productId, referrer &#125;</span>) &#123;<br>  <span class="hljs-keyword">const</span> handleSubmit = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 相当于useCallback()</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">orderDetails</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/product/&#x27;</span> + productId + <span class="hljs-string">&#x27;/buy&#x27;</span>, &#123;<br>        referrer,<br>        orderDetails<br>      &#125;);<br>    &#125;;<br>  &#125;, [productId, referrer]);<br><br>  <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">onSubmit</span>=<span class="hljs-string">&#123;handleSubmit&#125;</span> /&gt;</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
